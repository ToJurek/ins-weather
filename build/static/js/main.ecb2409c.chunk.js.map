{"version":3,"sources":["images/background/afternoon.jpg","images/background/morning.jpg","images/background/night.jpg","images/error.png","images/background/export.tsx","components/state/State.tsx","components/cardHeader/Header.tsx","components/cardBody/Body.tsx","components/button/Button.tsx","components/weather/WeatherView.tsx","components/weather/WeatherComponent.tsx","utlils/mapUtils/WeatherMapUtlils.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Afternoon","require","Morning","Night","errorIcon","State","props","isLoaded","error","className","src","alt","Header","icon","faMapMarkerAlt","city","Body","weather","parameters","faCloudSun","value","clouds","faTint","humidity","faAngleDoubleDown","pressure","time","temp","tempMax","tempMin","feelsLike","description","map","parameter","index","key","renderParameters","Button","onClick","handleClick","name","WeatherView","refetchData","Weather","useState","setError","setIsLoaded","setWeather","fetchData","axios","get","then","response","asTemperature","Math","round","asPercent","text","charAt","toUpperCase","slice","main","feels_like","temp_min","temp_max","all","datetime","dt","moment","unix","format","mapWeather","data","catch","useEffect","interval","setInterval","clearInterval","getBackground","hour","Date","getHours","App","style","backgroundImage","Boolean","window","location","hostname","match","config","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ecb2409c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/afternoon.b9a6b085.jpg\";","module.exports = __webpack_public_path__ + \"static/media/morning.85d922db.jpg\";","module.exports = __webpack_public_path__ + \"static/media/night.214a2c11.jpg\";","module.exports = __webpack_public_path__ + \"static/media/error.b1a03f07.png\";","export const Afternoon: string = require('./afternoon.jpg')\r\nexport const Morning: string = require('./morning.jpg')\r\nexport const Night: string = require('./night.jpg')\r\n","import React from 'react';\r\nimport './State.css';\r\nconst errorIcon = require('../../images/error.png')\r\n\r\ninterface Props {\r\n    error: string,\r\n    isLoaded: boolean\r\n}\r\n\r\nfunction renderLoader() {\r\n    return (\r\n        <div className=\"spinner\">\r\n            <div className=\"bounce1\"></div>\r\n            <div className=\"bounce2\"></div>\r\n            <div className=\"bounce3\"></div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nfunction renderErrorMessage(error: string) {\r\n    return (\r\n        <div>\r\n            <img src={errorIcon} alt={'error'}\r\n                 className={'error-img'}/>\r\n            <span className={'error-message'}>{error}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction State(props: Props) {\r\n    return (\r\n        <>\r\n            {!props.isLoaded && !props.error && renderLoader()}\r\n            {props.error && renderErrorMessage(props.error)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default State\r\n","import React from 'react';\r\nimport './Header.css';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faMapMarkerAlt} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface Props {\r\n    city: string\r\n}\r\n\r\nfunction Header(props: Props) {\r\n    return (\r\n        <div className={'header'}>\r\n            <FontAwesomeIcon icon={faMapMarkerAlt} className={'map-marker'}/>\r\n            <span className={'city'}>{props.city}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Body.css';\r\nimport IWeather from \"../interfaces/IWeather\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faAngleDoubleDown, faCloudSun, faTint} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\r\n\r\ninterface Parameter {\r\n    icon: IconProp,\r\n    value: string\r\n}\r\n\r\ninterface Props {\r\n    weather: IWeather\r\n}\r\n\r\nfunction Body(props: Props) {\r\n    let weather = props.weather;\r\n    let parameters: Parameter[] = [{icon: faCloudSun, value: weather.clouds}, {\r\n        icon: faTint,\r\n        value: weather.humidity\r\n    }, {icon: faAngleDoubleDown, value: weather.pressure}];\r\n    return (\r\n        <>\r\n            <div className={'last-update'}>Last update: {weather.time}</div>\r\n            <div className={'row'}>\r\n                <div className={'column'}><img\r\n                    alt={'weather-icon'} src={'http://openweathermap.org/img/wn/' + weather.icon + '@2x.png'}/></div>\r\n                <div className={'column'}><span className={'temp'}>{weather.temp}</span></div>\r\n            </div>\r\n            <div>{weather.tempMax + '/' + weather.tempMin + ' RealFeel ' + weather.feelsLike}</div>\r\n            <div>{weather.description}</div>\r\n            {renderParameters(parameters)}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nfunction renderParameters(parameters: Parameter[]): React.ReactNode | null {\r\n    return parameters.map((parameter, index) => {\r\n        return (<div key={index}>\r\n            <FontAwesomeIcon icon={parameter.icon} className={'parameter-icon'}/>\r\n            <span>{parameter.value}</span>\r\n        </div>)\r\n    })\r\n}\r\n\r\nexport default Body;\r\n","import React from 'react';\r\nimport './Button.css';\r\n\r\ninterface Props {\r\n    name: string\r\n    handleClick: any\r\n}\r\n\r\nfunction Button(props: Props) {\r\n    return (<button className={'refresh-button'} onClick={() => props.handleClick()}>{props.name}</button>)\r\n}\r\n\r\nexport default Button\r\n","import React from 'react';\r\nimport './Weather.css';\r\nimport IWeather from \"../interfaces/IWeather\";\r\nimport Header from \"../cardHeader/Header\";\r\nimport Body from \"../cardBody/Body\";\r\nimport Button from \"../button/Button\";\r\n\r\ninterface Props {\r\n    weather: IWeather,\r\n    refetchData: any\r\n}\r\n\r\nfunction WeatherView(props: Props) {\r\n    let weather: IWeather = props.weather;\r\n    return (\r\n        <div className={'content'}>\r\n            <div className={\"dashboard\"}>\r\n                <Header city={\"WrocÅ‚aw\"}/>\r\n                <Body weather={weather}/>\r\n            </div>\r\n            <Button handleClick={props.refetchData} name={\"Update\"}/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default WeatherView;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './Weather.css';\r\n\r\nimport axios from \"axios\";\r\nimport State from \"../state/State\";\r\nimport WeatherView from \"./WeatherView\";\r\nimport {mapWeather} from \"../../utlils/mapUtils/WeatherMapUtlils\";\r\n\r\nfunction Weather() {\r\n    const [error, setError] = useState('');\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [weather, setWeather] = useState();\r\n\r\n    function fetchData(): void {\r\n        setIsLoaded(false);\r\n        axios.get('https://api.openweathermap.org/data/2.5/weather?q=wroclaw&appid=' + process.env.REACT_APP_WEATHER_API_KEY + '&units=metric')\r\n            .then(response => {\r\n                setWeather(mapWeather(response.data));\r\n                setIsLoaded(true)\r\n            })\r\n            .catch(error => {\r\n                setError(\"BlÄ…d podczas wczytywania pliku\");\r\n                setIsLoaded(true)\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!weather) {\r\n            fetchData();\r\n        }\r\n        const interval = setInterval(() => {\r\n            fetchData();\r\n        }, 300000);\r\n        return () => clearInterval(interval);\r\n    }, [weather]);\r\n\r\n\r\n    return (\r\n        <div className={'shadow-background'}>\r\n            <div className={'card'}>\r\n                {isLoaded ? <WeatherView weather={weather} refetchData={() => fetchData()}/> :\r\n                    <State error={error} isLoaded={isLoaded}/>\r\n                }</div>\r\n        </div>)\r\n\r\n}\r\n\r\nexport default Weather;\r\n","import moment from \"moment\";\r\nimport IWeather from \"../../components/interfaces/IWeather\";\r\n\r\nexport const mapWeather = (response: any): IWeather => {\r\n    function capitalizeFirstLetter(text: string): string {\r\n        return text.charAt(0).toUpperCase() + text.slice(1);\r\n    }\r\n\r\n    function getFormattedDatetime(datetime: number): string {\r\n        return moment.unix(datetime).format(\"DD/MM/YY hh:MM A\");\r\n    }\r\n\r\n    function asTemperature(value: number): string {\r\n        return Math.round(value) + \"Â°\";\r\n    }\r\n\r\n    function ashPa(value: number): string {\r\n        return value + \"hPa\"\r\n    }\r\n\r\n    function asPercent(value: number): string {\r\n        return value + \"%\"\r\n    }\r\n    return {\r\n        icon: response.weather[0].icon,\r\n        description: capitalizeFirstLetter(response.weather[0].description),\r\n        temp: asTemperature(response.main.temp),\r\n        feelsLike: asTemperature(response.main.feels_like),\r\n        tempMin: asTemperature(response.main.temp_min),\r\n        tempMax: asTemperature(response.main.temp_max),\r\n        pressure: ashPa(response.main.pressure),\r\n        humidity: asPercent(response.main.humidity),\r\n        clouds: asPercent(response.clouds.all),\r\n        time: getFormattedDatetime(response.dt)\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Afternoon, Morning, Night} from '../../images/background/export';\nimport Weather from \"../weather/WeatherComponent\";\n\n\nfunction getBackground(): string {\n    let hour: number = new Date().getHours();\n    if (hour >= 6 && hour < 11)\n        return Morning;\n    if (hour >= 11 && hour < 19)\n        return Afternoon;\n    return Night\n}\n\nfunction App() {\n    let style = {backgroundImage: `url(${getBackground()})`};\n    return (\n        <div className=\"App\" style={style}>\n            <Weather/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}